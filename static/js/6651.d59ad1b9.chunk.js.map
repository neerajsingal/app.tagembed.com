{"version":3,"file":"static/js/6651.d59ad1b9.chunk.js","mappings":"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","sources":["app/Authentication/Components/Industry.js","app/Authentication/MoreInfo.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form } from 'react-bootstrap';\n\nconst industries = [\n    'Agency',\n    'Education',\n    'E-commerce & Retail',\n    'Hospitality',\n    'Food & Beverage',\n    'Automobile',\n    'Non Profit',\n    'Sports',\n    'Entertainment',\n    'Real Estate',\n    'Technology',\n    'Banking & Financial',\n    'Others'\n]; \n\nconst Industry = ({ onIndustryChange }) => {\n    const [selectedIndustry, setSelectedIndustry] = useState('');\n    const [customIndustry, setCustomIndustry] = useState('');\n\n    const handleIndustryChange = (industry) => {\n        setSelectedIndustry(industry);\n        if (industry !== 'Others') {\n            onIndustryChange(industry);\n            setCustomIndustry('');\n        }\n    };\n\n    const handleCustomIndustryChange = (e) => {\n        const value = e.target.value;\n        setCustomIndustry(value);\n        onIndustryChange(value);\n    };\n\n    return (\n        <div className=\"industry-selector\">\n            <div className=\"d-flex flex-wrap gap-3\">\n                {industries.map((industry) => (\n                    <div\n                        key={industry}\n                        className={`py-2 px-3 rounded cursor-pointer ${\n                            selectedIndustry === industry ? 'bg-dark text-white' : 'bg-white text-muted'\n                        }`}\n                        onClick={() => handleIndustryChange(industry)}\n                        style={{ cursor: 'pointer' }}\n                    >\n                        {industry}\n                    </div>\n                ))}\n            </div>\n            {selectedIndustry === 'Others' && (\n                <Form.Group>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter your industry\"\n                        value={customIndustry}\n                        onChange={handleCustomIndustryChange}\n                        className=\"mt-2 py-2 px-3 rounded\"\n                        style={{maxWidth:'400px'}}\n                    />\n                </Form.Group>\n            )}\n        </div>\n    );\n};\n\nexport default Industry;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Helmet } from \"react-helmet\";\nimport { Form, Button } from \"react-bootstrap\";\nimport FormTerms from \"./Components/FormTerms\";\nimport Industry from \"./Components/Industry\";\nimport { COMPANY_NAME } from \"../../actions/api\";\nimport PhoneInputField from \"../Layout/Main/CommonComponents/PhoneInput\";\nimport { getUserInfo, otherInfoSkip, otherInfoUpate } from '../../actions/loginActions';\n\nclass MoreInfo extends Component {\n    state = { isValid: null, phone: \"\", country_code: null, countrySortname: \"\", industry: \"\" }\n    onIndustryChange = (value) => this.setState({ industry: value });\n\n    onClickToSkip = event => {\n        const { history, getUserData } = this.props\n        otherInfoSkip(history, () => getUserData(history, false))\n    }\n\n    onClickToFinish = event => {\n        const { history, getUserData } = this.props\n        const { phone, country_code, industry, isValid } = this.state;\n        const payload = {\n            organization: \"\",\n            industry: String(industry || ''),\n            country_code: phone ? String(country_code || '') : \"\",\n            contact_no: (String(phone).includes(`+${country_code}`) ? String(phone).replace(`+${country_code}`, '') : phone)?.replace(/^0+/, '')\n        }\n        const phoneNumber = payload?.contact_no ?? \"\";\n        if (phoneNumber || industry) {\n            if(industry) otherInfoUpate(payload, history, () => getUserData(history, false));\n            else if(phoneNumber && isValid) otherInfoUpate(payload, history, () => getUserData(history, false))\n        } else this.onClickToSkip()\n    }\n\n    handleCountry = (country) => this.setState({ countrySortname: country });\n    handlePhoneInput = (value, isValid, code) => {\n        if (!value) this.setState({ isValid: true })\n        else this.setState({ phone: value, isValid, country_code: code, countrySortname: code })\n    }\n\n    render() {\n        const { phone, countrySortname, isValid } = this.state;\n\n        return <>\n            {window.location.host.includes('app') ? <Helmet script={[{\n                type: 'text/javascript',\n                innerHTML: `(function() { gtag('event', 'conversion', { 'send_to': 'AW-919733403/dpLYCN33g5UBEJuJyLYD' }) })()`\n            }]}></Helmet> : null}\n            \n            <div className=\"w-100 mb-lg-0 mb-3\">\n            <div className=\"text-start\">\n                <h1 className=\" mb-0 display-2 fw-bold\">Let's Personalize Your {COMPANY_NAME} Journey!</h1>\n            </div>\n            <div className=\"mb-8\">\n                <Form.Group className=\"mb-4 my-5 py-5\">\n                    <Form.Label className=\"fw-bold mb-4\" htmlFor=\"industry\">Choose your Industry:</Form.Label>\n                    <Industry onIndustryChange={this.onIndustryChange} />\n                </Form.Group>\n                <Form.Group className=\"mb-4 mb-xl-5 py-xl-4\">\n                    <Form.Label className=\"fw-bold d-block\" htmlFor=\"comp_name\">Phone No.</Form.Label>\n                    <PhoneInputField handlePhoneInput={this.handlePhoneInput} valid={isValid} number={phone} countrySortname={countrySortname} handleCountry={this.handleCountry} />\n                </Form.Group>\n            </div>\n            <Form.Group className=\"mb-4 mb-xl-5\">\n                <Button size=\"md\" onClick={() => countrySortname ? this.onClickToFinish() : ''} id=\"finish_info\" className=\"me-4\">Submit</Button>\n                {/* <Button variant=\"link text-gray-400 fw-medium active-primary\" onClick={() => countrySortname ? this.onClickToSkip() : ''} id=\"skip_info\" className=\"text-gray-100 text-decoration-underline\">I'll do this later</Button> */}\n            </Form.Group>\n            <FormTerms />\n        </div>\n        </>\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getUserData: (history, callBack = 0) => dispatch(getUserInfo(history, callBack))\n    }\n}\nexport default connect(null, mapDispatchToProps)(MoreInfo);"],"names":["industries","_ref","onIndustryChange","selectedIndustry","setSelectedIndustry","useState","customIndustry","setCustomIndustry","_jsxs","className","children","_jsx","map","industry","concat","onClick","handleIndustryChange","style","cursor","Form","Group","Control","type","placeholder","value","onChange","e","target","maxWidth","MoreInfo","Component","constructor","arguments","state","isValid","phone","country_code","countrySortname","this","setState","onClickToSkip","event","history","getUserData","props","otherInfoSkip","onClickToFinish","_payload$contact_no","payload","organization","String","contact_no","includes","replace","phoneNumber","otherInfoUpate","handleCountry","country","handlePhoneInput","code","render","_Fragment","window","location","host","Helmet","script","innerHTML","COMPANY_NAME","Label","htmlFor","Industry","PhoneInputField","valid","number","Button","size","id","FormTerms","connect","dispatch","callBack","length","undefined","getUserInfo"],"sourceRoot":""}